# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pysary')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pysary')
    _pysary = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pysary', [dirname(__file__)])
        except ImportError:
            import _pysary
            return _pysary
        try:
            _mod = imp.load_module('_pysary', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pysary = swig_import_helper()
    del swig_import_helper
else:
    import _pysary
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def sary_searcher_new(file_name):
    return _pysary.sary_searcher_new(file_name)
sary_searcher_new = _pysary.sary_searcher_new

def sary_searcher_new2(file_name, array_name):
    return _pysary.sary_searcher_new2(file_name, array_name)
sary_searcher_new2 = _pysary.sary_searcher_new2

def sary_searcher_destroy(searcher):
    return _pysary.sary_searcher_destroy(searcher)
sary_searcher_destroy = _pysary.sary_searcher_destroy

def sary_searcher_search(searcher, pattern):
    return _pysary.sary_searcher_search(searcher, pattern)
sary_searcher_search = _pysary.sary_searcher_search

def sary_searcher_search2(searcher, pattern, len):
    return _pysary.sary_searcher_search2(searcher, pattern, len)
sary_searcher_search2 = _pysary.sary_searcher_search2

def sary_searcher_isearch(searcher, pattern, len):
    return _pysary.sary_searcher_isearch(searcher, pattern, len)
sary_searcher_isearch = _pysary.sary_searcher_isearch

def sary_searcher_isearch_reset(searcher):
    return _pysary.sary_searcher_isearch_reset(searcher)
sary_searcher_isearch_reset = _pysary.sary_searcher_isearch_reset

def sary_searcher_icase_search(searcher, pattern):
    return _pysary.sary_searcher_icase_search(searcher, pattern)
sary_searcher_icase_search = _pysary.sary_searcher_icase_search

def sary_searcher_icase_search2(searcher, pattern, len):
    return _pysary.sary_searcher_icase_search2(searcher, pattern, len)
sary_searcher_icase_search2 = _pysary.sary_searcher_icase_search2

def sary_searcher_get_text(searcher):
    return _pysary.sary_searcher_get_text(searcher)
sary_searcher_get_text = _pysary.sary_searcher_get_text

def sary_searcher_get_array(searcher):
    return _pysary.sary_searcher_get_array(searcher)
sary_searcher_get_array = _pysary.sary_searcher_get_array

def sary_searcher_get_next_line(searcher):
    return _pysary.sary_searcher_get_next_line(searcher)
sary_searcher_get_next_line = _pysary.sary_searcher_get_next_line

def sary_searcher_get_next_line2(searcher, len):
    return _pysary.sary_searcher_get_next_line2(searcher, len)
sary_searcher_get_next_line2 = _pysary.sary_searcher_get_next_line2

def sary_searcher_get_next_context_lines(searcher, backward, forward):
    return _pysary.sary_searcher_get_next_context_lines(searcher, backward, forward)
sary_searcher_get_next_context_lines = _pysary.sary_searcher_get_next_context_lines

def sary_searcher_get_next_context_lines2(searcher, backward, forward, len):
    return _pysary.sary_searcher_get_next_context_lines2(searcher, backward, forward, len)
sary_searcher_get_next_context_lines2 = _pysary.sary_searcher_get_next_context_lines2

def sary_searcher_get_next_tagged_region(searcher, start_tag, end_tag):
    return _pysary.sary_searcher_get_next_tagged_region(searcher, start_tag, end_tag)
sary_searcher_get_next_tagged_region = _pysary.sary_searcher_get_next_tagged_region

def sary_searcher_get_next_tagged_region2(searcher, start_tag, start_tag_len, end_tag, end_tag_len, len):
    return _pysary.sary_searcher_get_next_tagged_region2(searcher, start_tag, start_tag_len, end_tag, end_tag_len, len)
sary_searcher_get_next_tagged_region2 = _pysary.sary_searcher_get_next_tagged_region2

def sary_searcher_get_next_occurrence(searcher):
    return _pysary.sary_searcher_get_next_occurrence(searcher)
sary_searcher_get_next_occurrence = _pysary.sary_searcher_get_next_occurrence

def sary_searcher_count_occurrences(searcher):
    return _pysary.sary_searcher_count_occurrences(searcher)
sary_searcher_count_occurrences = _pysary.sary_searcher_count_occurrences

def sary_searcher_sort_occurrences(searcher):
    return _pysary.sary_searcher_sort_occurrences(searcher)
sary_searcher_sort_occurrences = _pysary.sary_searcher_sort_occurrences

def sary_searcher_enable_cache(searcher):
    return _pysary.sary_searcher_enable_cache(searcher)
sary_searcher_enable_cache = _pysary.sary_searcher_enable_cache
# This file is compatible with both classic and new-style classes.


